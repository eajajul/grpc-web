def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

dependencies {
    implementation files('src/main/libs/lib.aar')
    implementation files('src/main/libs/lib-sources.jar')
    //implementation 'androidx.core:core-ktx:1.7.0-alpha01'
}


android {
    //compileSdkVersion flutter.compileSdkVersion
    compileSdkVersion 31


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_native"
        minSdkVersion flutter.minSdkVersion
        // targetSdkVersion flutter.targetSdkVersion
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        configurations.all {
            resolutionStrategy {
                force 'androidx.work:work-runtime:2.6.0'
            }
        }

    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
        }
        enterprise {
            // blah blah
            matchingFallbacks = ['release']
        }
        debug {
            // blah blah
            matchingFallbacks = ['debug']
        }
    }
    lint {
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}

/*configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
    }
}*/
